#!/usr/bin/env python

import tarfile
import tempfile
import urllib.request
import re
import os
import yaml

def mirror_status(url, wanted):
    with tempfile.TemporaryDirectory() as tmp:
        filename = os.path.join(tmp, os.path.basename(url))
        urllib.request.urlretrieve(url, filename)
        tar = tarfile.open(filename, mode='r')
        for member in tar.getmembers():
            pkgname, _ = package_version(member.name)
            if pkgname in wanted:
                tar.extract(member, tmp)
        pkgnames = [x for x in os.listdir(tmp) if x != os.path.basename(url)]
        pkgname2filename = {}
        for pkgname in pkgnames:
            with open(os.path.join(tmp, pkgname, "desc")) as f:
                assert f.readline() == "%FILENAME%\n"
                filename = f.readline().rstrip()
                pkgname2filename[pkgname] = filename
        return [(package_version(x), pkgname2filename[x]) for x in pkgnames]

def package_version(s):
    m = re.match(r"^(.*)(-.*-.*)$", s)
    return m.group(1), m.group(2)[1:]

def updates(wanted, locally_stored, url):
    mstatus = mirror_status(url, wanted)
    for (pkgname, _), filename in mstatus:
        if pkgname in wanted and not filename in locally_stored:
            yield filename

def main():
    with open("/etc/clyde/config.yml") as f:
        config = yaml.safe_load(f)
    filenames = os.listdir("/etc/cpcache/wanted_packages")
    wanted = set()
    for filename in filenames:
        with open(os.path.join("/etc/cpcache/wanted_packages", filename)) as f:
            for packagename in f:
                wanted.add(packagename)
    repo_configs = [(k, v) for k, v in config.items() if k != "wanted_packages_file"]
    for repo, attribs in repo_configs:
        pkg_url = attribs["pkg_url"]
        db_url = os.path.join(pkg_url, repo + ".db")
        print("Check for new files in repository", repo)
        locally_stored = os.listdir(attribs["local_directory"])
        for filename in updates(wanted, locally_stored, db_url):
            print("Downloading {}â€¦".format(filename))
            pkgurl = os.path.join(pkg_url, filename)
            urllib.request.urlretrieve(pkgurl, os.devnull)
            print("Download completed.")

if __name__ == "__main__":
    main()
